[
["index.html", "Rでできる - ゼロから作るRAW現像 はじめに これは何 ライセンス", " Rでできる - ゼロから作るRAW現像 @igjit 2019-08-18 はじめに これは何 Moiz氏の本、PythonとColabでできる - ゼロから作るRAW現像 の内容をRで実装しようとするものです。 ライセンス この文章自体のライセンスはTBD 文章中の現像結果の画像は、Moiz氏が https://github.com/moizumi99/camera_raw_processing で公開しているRAW画像の派生物です。 "],
["section-1.html", "1 インストール 1.1 Dockerを使う", " 1 インストール 実行にはいろいろ必要です。(Rでできる、と言いつつRAW画像の読み込みにPythonを使います。) R imager (画像処理ライブラリ) reticulate (RからPython呼ぶやつ) tidyverse (宇宙) Python rawpy (RAW画像読み込むやつ) 1.1 Dockerを使う インストールが面倒なものがあるので、Dockerを使うのがおすすめです。 全てインストール済みのDocker imageを用意しました。 https://hub.docker.com/r/igjit/r-raw-processing docker pullして実行 docker pull igjit/r-raw-processing docker run --rm -p 8787:8787 -e PASSWORD=xxxx igjit/r-raw-processing (xxxxは適宜変更してください。) ブラウザで http://localhost:8787/ にアクセスして、Username: rstudio、 Password: (設定したもの) を入力するとRStudioが使えるはずです。 "],
["section-2.html", "2 基本的な処理 2.1 準備 2.2 簡易デモザイク処理 2.3 ホワイトバランス補正 2.4 ブラックレベル補正 2.5 ガンマ補正", " 2 基本的な処理 2.1 準備 2.1.1 RAW画像の準備 RStudioのTerminalタブで以下を実行して、RAW画像ファイルをダウンロードします。 wget https://github.com/moizumi99/camera_raw_processing/raw/master/chart.jpg 2.1.2 RAW画像の読み込み 必要なパッケージを読み込み library(reticulate) library(imager) reticulate::importでPythonのrawpyモジュールをインポート rawpy &lt;- import(&quot;rawpy&quot;) 画像の読み込み raw_file &lt;- &quot;chart.jpg&quot; raw &lt;- rawpy$imread(raw_file) 画像データをRの行列に読み込み raw_array &lt;- raw$raw_image サイズの確認 raw_array %&gt;% dim ## [1] 2464 3280 画像を表示 raw_array %&gt;% t %&gt;% as.cimg %&gt;% plot 2.2 簡易デモザイク処理 2.2.1 RAW画像の確認 拡大表示 raw_array %&gt;% t %&gt;% as.cimg %&gt;% imsub(x %inr% c(2641, 2700), y %inr% c(1341, 1400)) %&gt;% plot(interpolate = FALSE) RAW画像のBayer配列を確認 raw$raw_pattern ## [,1] [,2] ## [1,] 2 3 ## [2,] 1 0 Bayer配列に対応するRGB画像を作リます。 raw_color &lt;- array(0, c(dim(raw_array), 1, 3)) raw_color[c(T, F), c(T, F), 1, 3] &lt;- raw_array[c(T, F), c(T, F)] raw_color[c(T, F), c(F, T), 1, 2] &lt;- raw_array[c(T, F), c(F, T)] raw_color[c(F, T), c(T, F), 1, 2] &lt;- raw_array[c(F, T), c(T, F)] raw_color[c(F, T), c(F, T), 1, 1] &lt;- raw_array[c(F, T), c(F, T)] 画像の行と列を入れ替える補助関数 ta &lt;- function(a) aperm(a, c(2, 1, 3, 4)) 表示 raw_color %&gt;% ta %&gt;% as.cimg %&gt;% plot 拡大表示 raw_color %&gt;% ta %&gt;% as.cimg %&gt;% imsub(x %inr% c(2641, 2700), y %inr% c(1341, 1400)) %&gt;% plot(interpolate = FALSE) 2.2.2 簡易デモザイク処理 簡易デモザイク処理 simple_demosaic &lt;- function(raw_array) { dms_img &lt;- array(0, c(dim(raw_array) / 2, 1, 3)) dms_img[,, 1, 3] &lt;- raw_array[c(T, F), c(T, F)] dms_img[,, 1, 2] &lt;- (raw_array[c(T, F), c(F, T)] + raw_array[c(F, T), c(T, F)]) / 2 dms_img[,, 1, 1] &lt;- raw_array[c(F, T), c(F, T)] dms_img } デモザイクして表示 raw_array %&gt;% simple_demosaic %&gt;% ta %&gt;% as.cimg %&gt;% plot 2.3 ホワイトバランス補正 2.3.1 ホワイトバランス補正処理 ホワイトバランスのゲインを確認 raw$camera_whitebalance ## [1] 1.128 1.000 2.546 1.000 ホワイトバランス補正処理 white_balance &lt;- function(raw_array, wb_gain, raw_colors) { norm &lt;- wb_gain[2] gain_matrix &lt;- array(0, c(dim(raw_array))) for (color in 0:3) { gain_matrix[raw_colors == color] &lt;- wb_gain[color + 1] / norm } raw_array * gain_matrix } ホワイトバランス補正して簡易デモザイク gain &lt;- raw$camera_whitebalance colors &lt;- raw$raw_colors dms_img &lt;- white_balance(raw_array, gain, colors) %&gt;% simple_demosaic 画像を0と1の間でノーマライズする補助関数 normalize &lt;- function(img) { img &lt;- img / 1024 img[img &lt; 0] &lt;- 0 img[img &gt; 1] &lt;- 1 img } 表示 dms_img %&gt;% normalize %&gt;% ta %&gt;% as.cimg %&gt;% plot 2.4 ブラックレベル補正 2.4.1 ブラックレベル補正処理 ブラックレベルを確認 blc &lt;- raw$black_level_per_channel blc ## [1] 66 66 66 66 ブラックレベル補正処理 black_level_correction &lt;- function(raw_array, blc, pattern) { pattern &lt;- pattern + 1 raw_array[c(T, F), c(T, F)] &lt;- raw_array[c(T, F), c(T, F)] - blc[pattern[1, 1]] raw_array[c(T, F), c(F, T)] &lt;- raw_array[c(T, F), c(F, T)] - blc[pattern[1, 2]] raw_array[c(F, T), c(T, F)] &lt;- raw_array[c(F, T), c(T, F)] - blc[pattern[2, 1]] raw_array[c(F, T), c(F, T)] &lt;- raw_array[c(F, T), c(F, T)] - blc[pattern[2, 2]] raw_array } 確認 dms_img &lt;- raw_array %&gt;% black_level_correction(blc, raw$raw_pattern) %&gt;% white_balance(raw$camera_whitebalance, raw$raw_colors) %&gt;% simple_demosaic dms_img %&gt;% normalize %&gt;% ta %&gt;% as.cimg %&gt;% plot 2.5 ガンマ補正 2.5.1 ガンマ補正とは ガンマカーブ curve(x ^ 2.2, 0, 1) ガンマ補正カーブ curve(x ^ (1 / 2.2), 0, 1) 2.5.2 ガンマ補正処理 ガンマ補正処理 gamma_correction &lt;- function(input_img, gamma) { input_img[input_img &lt; 0] &lt;- 0 input_img[input_img &gt; 1] &lt;- 1 input_img ^ (1 / gamma) } 確認 dms_img %&gt;% normalize %&gt;% gamma_correction(2.2) %&gt;% ta %&gt;% as.cimg %&gt;% plot "],
["section-3.html", "3 重要な処理 3.1 線形補間デモザイク 3.2 欠陥画素補正 3.3 カラーマトリクス補正 3.4 シェーディング補正", " 3 重要な処理 3.1 線形補間デモザイク 3.1.1 簡易デモザイク処理の問題点 簡易デモザイク処理を使ったRAW現像 raw_array &lt;- raw$raw_image white_level &lt;- 1024 wb_raw &lt;- raw_array %&gt;% black_level_correction(raw$black_level_per_channel, raw$raw_pattern) %&gt;% white_balance(raw$camera_whitebalance, raw$raw_colors) dms_img &lt;- wb_raw %&gt;% simple_demosaic %&gt;% `/`(white_level) gmm_img &lt;- gamma_correction(dms_img, 2.2) 表示 gmm_img %&gt;% ta %&gt;% as.cimg %&gt;% plot 現像後のサイズ dim(gmm_img) %&gt;% head(2) ## [1] 1232 1640 RAWデータのサイズ dim(raw_array) ## [1] 2464 3280 JPEG画像の読み込み jpg_img &lt;- imager::load.image(raw_file) 拡大して比較 x1 &lt;- 836 y1 &lt;- 741 dx1 &lt;- 100 dy1 &lt;- 100 par(mfrow = c(1, 2)) gmm_img %&gt;% ta %&gt;% as.cimg %&gt;% imsub(x %inr% c(x1, x1 + dx1), y %inr% c(y1, y1 + dy1)) %&gt;% plot(interpolate = FALSE, main = &quot;簡易デモザイク結果&quot;) jpg_img %&gt;% imsub(x %inr% (c(x1, x1 + dx1) * 2), y %inr% (c(y1, y1 + dy1) * 2)) %&gt;% plot(interpolate = FALSE, main = &quot;JPEG画像&quot;) 3.1.2 線形補完法 線形補間デモザイク demosaic &lt;- function(raw_array, raw_colors, pattern) { dms_img &lt;- array(0, c(dim(raw_array), 1, 3)) g &lt;- raw_array g[raw_colors %in% c(0, 2)] &lt;- 0 g_filter &lt;- array(c(0, 1, 0, 1, 4, 1, 0, 1, 0) / 4, c(3, 3, 1, 1)) G(dms_img) &lt;- convolve(as.cimg(g), g_filter) r &lt;- raw_array r[raw_colors != 0] &lt;- 0 r_filter &lt;- array(c(1/4, 1/2, 1/4, 1/2, 1, 1/2, 1/4, 1/2, 1/4), c(3, 3, 1, 1)) R(dms_img) &lt;- convolve(as.cimg(r), r_filter) b &lt;- raw_array b[raw_colors != 2] &lt;- 0 # 青のフィルターは赤と共通 B(dms_img) &lt;- convolve(as.cimg(b), r_filter) dms_img } デモザイク処理 dms_full_img &lt;- wb_raw %&gt;% demosaic(raw$raw_colors, raw$raw_pattern) サイズを確認 dms_full_img %&gt;% dim %&gt;% head(2) ## [1] 2464 3280 ガンマ補正処理 gmm_full_img &lt;- gamma_correction(dms_full_img / white_level, 2.2) 比較 par(mfrow = c(1, 2)) gmm_img %&gt;% ta %&gt;% as.cimg %&gt;% imsub(x %inr% c(x1, x1 + dx1), y %inr% c(y1, y1 + dy1)) %&gt;% plot(interpolate = FALSE, main = &quot;簡易デモザイク&quot;) gmm_full_img %&gt;% ta %&gt;% as.cimg %&gt;% imsub(x %inr% (c(x1, x1 + dx1) * 2), y %inr% (c(y1, y1 + dy1) * 2)) %&gt;% plot(interpolate = FALSE, main = &quot;線形補間デモザイク&quot;) 3.2 欠陥画素補正 TODO 3.3 カラーマトリクス補正 カラーマトリクス (CCM: Color Correction Matrix) color_matrix &lt;- matrix(c(6022, -2314, 394, -936, 4728, 310, 300, -4324, 8126), 3, 3, byrow = TRUE) / 4096 カラーマトリクス補正処理 color_correction_matrix &lt;- function(rgb_array, color_matrix) { ccm_img &lt;- array(0, dim(rgb_array)) for (col in 1:3) { ccm_img[,, 1, col] &lt;- color_matrix[col, 1] * R(rgb_array) + color_matrix[col, 2] * G(rgb_array) + color_matrix[col, 3] * B(rgb_array) } ccm_img } 比較 par(mfrow = c(1, 2)) gmm_full_img %&gt;% ta %&gt;% as.cimg %&gt;% plot(main = &quot;CCM補正なし&quot;) dms_full_img %&gt;% color_correction_matrix(color_matrix) %&gt;% `/`(white_level) %&gt;% gamma_correction(2.2) %&gt;% ta %&gt;% as.cimg %&gt;% plot(main = &quot;CCM補正あり&quot;) 3.4 シェーディング補正 3.4.1 レンズシェーディングの確認 RAW画像の読み込み raw_file &lt;- &quot;flat.jpg&quot; raw &lt;- rawpy$imread(raw_file) raw_array &lt;- raw$raw_image RAW現像処理 blc_raw &lt;- raw_array %&gt;% black_level_correction(raw$black_level_per_channel, raw$raw_pattern) original_img &lt;- blc_raw %&gt;% white_balance(raw$camera_whitebalance, raw$raw_colors) %&gt;% demosaic(raw$raw_colors, raw$raw_pattern) %&gt;% color_correction_matrix(color_matrix) %&gt;% `/`(white_level) %&gt;% gamma_correction(2.2) 画像表示 original_img %&gt;% ta %&gt;% as.cimg %&gt;% plot 明るさの横方向の変化 library(tidyverse) w &lt;- ncol(raw_array) h &lt;- nrow(raw_array) center_y &lt;- h / 2 center_x &lt;- w / 2 y &lt;- center_y - 16 horizontal_shading_profile &lt;- function(img, w, y) { seq(1, w - 32, 32) %&gt;% map_dfr(function(x) list(r = mean(img[y:(y + 32), x:(x + 32), 1, 1]), g = mean(img[y:(y + 32), x:(x + 32), 1, 2]), b = mean(img[y:(y + 32), x:(x + 32), 1, 3]))) %&gt;% map_dfr(~ . / max(.)) %&gt;% mutate(pos = 1:n()) } shading_profile &lt;- horizontal_shading_profile(original_img, w, y) ggplot(gather(shading_profile, &quot;color&quot;, &quot;value&quot;, -pos), aes(x = pos, y = value)) + geom_line(aes(color = color)) + ylim(0, 1) + scale_color_manual(values = c(r = &quot;red&quot;, g = &quot;green&quot;, b = &quot;blue&quot;)) 3.4.2 レンズシェーディングのモデル化 value_df &lt;- map_dfr(seq(1, h - 32, 32), function(y) { map_dfr(seq(1, w - 32, 32), function(x) { xx &lt;- x + 16 yy &lt;- y + 16 list( xx = xx, yy = yy, radial = (yy - center_y) * (yy - center_y) + (xx - center_x) * (xx - center_x), b = mean(blc_raw[seq(y, y + 32, 2), seq(x, x + 32, 2)]), g1 = mean(blc_raw[seq(y, y + 32, 2), seq(x + 1, x + 32, 2)]), g2 = mean(blc_raw[seq(y + 1, y + 32, 2), seq(x, x + 32, 2)]), r = mean(blc_raw[seq(y + 1, y + 32, 2), seq(x + 1, x + 32, 2)])) }) }) 最大値でノーマライズしてグラフにして確認 norm_value_df &lt;- value_df %&gt;% transmute(radial, b = b / max(b), g1 = g1 / max(g1), g2 = g2 / max(g2), r = r / max(r)) colors &lt;- c(r = &quot;red&quot;, g1 = &quot;green&quot;, g2 = &quot;green&quot;, b = &quot;blue&quot;) ggplot(gather(norm_value_df, &quot;color&quot;, &quot;value&quot;, -radial), aes(x = radial, y = value)) + geom_point(aes(color = color)) + ylim(0, 1) + scale_color_manual(values = colors) 逆数のグラフ inv_norm_value_df &lt;- norm_value_df %&gt;% select(-radial) %&gt;% map_dfc(~ 1 / .) %&gt;% add_column(radial = norm_value_df$radial, .before = TRUE) ggplot(gather(inv_norm_value_df, &quot;color&quot;, &quot;value&quot;, -radial), aes(x = radial, y = value)) + geom_point(aes(color = color)) + scale_color_manual(values = colors) "]
]
